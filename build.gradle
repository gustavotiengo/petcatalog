plugins {
	id 'java'
	id 'jacoco'
	id 'org.springframework.boot' version '3.2.2'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'nu.studer.jooq' version '9.0'
	id 'com.dorongold.task-tree' version '2.1.1'
	id 'org.sonarqube' version '4.4.1.3373'
}

group = 'com.gt'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}

	all*.exclude module : "spring-boot-starter-logging"
}

ext {
	springVersion = "3.2.2"
	postgresVersion = "42.6.0"
	micrometerVersion = "1.12.3"
	springDocVersion = "2.3.0"
}

repositories {
	mavenCentral()
	maven {
		url = uri("https://oss.sonatype.org/content/repositories/snapshots")
	}
}

dependencies {
	implementation "org.springframework.boot:spring-boot-starter:$springVersion"
	implementation "org.springframework.boot:spring-boot-starter-web:$springVersion"
	implementation "org.springframework.boot:spring-boot-starter-jooq:$springVersion"
	implementation "org.springframework.boot:spring-boot-starter-log4j2:$springVersion"
	implementation "org.springframework.boot:spring-boot-starter-actuator:$springVersion"
	implementation "org.springframework.boot:spring-boot-starter-data-redis:$springVersion"
	implementation "io.micrometer:micrometer-registry-prometheus:$micrometerVersion"
	implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:$springDocVersion"

	developmentOnly "org.springframework.boot:spring-boot-docker-compose:$springVersion"
	runtimeOnly "org.postgresql:postgresql:$postgresVersion"
	testImplementation "org.springframework.boot:spring-boot-starter-test"

	jooqGenerator "org.postgresql:postgresql:$postgresVersion"
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.named('bootRun') {
	systemProperty "spring.profiles.active", "default"
}

tasks.register('bootRunProd') {
	group 'application'
	bootRun.configure {
		systemProperty "spring.profiles.active", "prod"
	}
	finalizedBy(bootRun)
}

bootJar {
	archiveFileName = 'app.jar'
}

jacocoTestReport {
	reports {
		xml.required = true
	}
	dependsOn test

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"com/gt/petcatalog/tables/*",
					"com/gt/petcatalog/*.*"
			])
		}))
	}
}

sonar {
	properties {
		property "sonar.projectKey", "gustavotiengo_petcatalog"
		property "sonar.organization", "gustavotiengo"
		property "sonar.host.url", "https://sonarcloud.io"
		property 'sonar.jacoco.reportPaths', 'build/reports/jacoco/test/jacocoTestReport.xml'
		property 'sonar.exclusions', 'com/gt/petcatalog/tables/*,com/gt/petcatalog/*.*'
	}
}

tasks.named('sonar').configure {
	dependsOn jacocoTestReport
}

jooq {
	version = '3.18.10'

	configurations {
		main {
			generationTool {
				jdbc {
					driver = 'org.postgresql.Driver'
					url = 'jdbc:postgresql://localhost:5432/petcatalog'
					user = 'admin'
					password = 'admin'
				}
				generator {
					name = 'org.jooq.codegen.DefaultGenerator'
					database {
						name = 'org.jooq.meta.postgres.PostgresDatabase'
						inputSchema = 'public'
						forcedTypes {
							forcedType {
								name = 'varchar'
								includeExpression = '.*'
								includeTypes = 'JSONB?'
							}
							forcedType {
								name = 'varchar'
								includeExpression = '.*'
								includeTypes = 'INET'
							}
						}
					}
					generate {
						deprecated = false
						records = true
						immutablePojos = true
						fluentSetters = true
					}
					target {
						packageName = 'com.gt.petcatalog'
						directory = 'src/main/jooq'
					}
					strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
				}
			}
		}
	}
}

tasks.named('generateJooq').configure { allInputsDeclared = true }
tasks.named('generateJooq').configure {
	launcher = javaToolchains.launcherFor {
		languageVersion = JavaLanguageVersion.of(17)
	}
}