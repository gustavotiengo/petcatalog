/*
 * This file is generated by jOOQ.
 */
package com.gt.springtools.dto;


import com.fasterxml.jackson.annotation.JsonInclude;
import com.gt.springtools.Constants;
import com.gt.springtools.tables.records.UserRecord;
import jakarta.validation.constraints.*;

import java.beans.ConstructorProperties;
import java.io.Serial;
import java.io.Serializable;
import java.time.LocalDateTime;


public class User implements Serializable {

    @Serial
    private static final long serialVersionUID = 1L;

    @Pattern(regexp = Constants.UUID_V4)
    @Null
    private final String externalId;
    @NotNull
    @NotBlank
    private final String name;
    @NotNull
    @NotBlank
    private final String phone;
    @Email
    @NotNull
    @NotBlank
    private final String email;
    @Size(min = 5)
    private final String address;
    @NotNull
    @NotBlank
    private final String region;
    @NotNull
    @NotBlank
    private final String city;
    @NotNull
    @NotBlank
    @Size(min = 2, max = 2)
    private final String state;
    @Null
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private final LocalDateTime createdAt;
    @Null
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private final LocalDateTime lastUpdate;

    @ConstructorProperties({ "externalId", "name", "phone", "email", "address",
            "region", "city", "state", "createdAt", "lastUpdate" })
    public User(
        String externalId,
        String name,
        String phone,
        String email,
        String address,
        String region,
        String city,
        String state,
        LocalDateTime createdAt,
        LocalDateTime lastUpdate
    ) {
        this.externalId = externalId;
        this.name = name;
        this.phone = phone;
        this.email = email;
        this.address = address;
        this.region = region;
        this.city = city;
        this.state = state;
        this.createdAt = createdAt;
        this.lastUpdate = lastUpdate;
    }

    public User(UserRecord userRecord) {
        this.externalId = String.valueOf(userRecord.getExternalId());
        this.name = userRecord.getName();
        this.phone = userRecord.getPhone();
        this.email = userRecord.getEmail();
        this.address = userRecord.getAddress();
        this.region = userRecord.getRegion();
        this.city = userRecord.getCity();
        this.state = userRecord.getState();
        this.createdAt = userRecord.getCreatedAt();
        this.lastUpdate = userRecord.getLastUpdate();
    }

    /**
     * Getter for <code>public.users.external_id</code>.
     */
    public String getExternalId() {
        return this.externalId;
    }

    /**
     * Getter for <code>public.users.name</code>.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Getter for <code>public.users.phone</code>.
     */
    public String getPhone() {
        return this.phone;
    }

    /**
     * Getter for <code>public.users.email</code>.
     */
    public String getEmail() {
        return this.email;
    }

    /**
     * Getter for <code>public.users.address</code>.
     */
    public String getAddress() {
        return this.address;
    }

    public String getRegion() {
        return this.region;
    }

    public String getCity() {
        return this.city;
    }

    public String getState() {
        return this.state;
    }

    public LocalDateTime getCreatedAt() {
        return this.createdAt;
    }

    public LocalDateTime getLastUpdate() {
        return this.lastUpdate;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final User other = (User) obj;
        if (this.externalId == null) {
            if (other.externalId != null)
                return false;
        }
        else if (!this.externalId.equals(other.externalId))
            return false;
        if (this.name == null) {
            if (other.name != null)
                return false;
        }
        else if (!this.name.equals(other.name))
            return false;
        if (this.phone == null) {
            if (other.phone != null)
                return false;
        }
        else if (!this.phone.equals(other.phone))
            return false;
        if (this.email == null) {
            if (other.email != null)
                return false;
        }
        else if (!this.email.equals(other.email))
            return false;
        if (this.address == null) {
            if (other.address != null)
                return false;
        }
        else if (!this.address.equals(other.address))
            return false;
        if (this.region == null) {
            if (other.region != null)
                return false;
        }
        else if (!this.region.equals(other.region))
            return false;
        if (this.city == null) {
            if (other.city != null)
                return false;
        }
        else if (!this.city.equals(other.city))
            return false;
        if (this.state == null) {
            if (other.state != null)
                return false;
        }
        else if (!this.state.equals(other.state))
            return false;
        if (this.createdAt == null) {
            if (other.createdAt != null)
                return false;
        }
        else if (!this.createdAt.equals(other.createdAt))
            return false;
        if (this.lastUpdate == null) {
            return other.lastUpdate == null;
        }
        else
            return this.lastUpdate.equals(other.lastUpdate);
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.externalId == null) ? 0 : this.externalId.hashCode());
        result = prime * result + ((this.phone == null) ? 0 : this.phone.hashCode());
        result = prime * result + ((this.email == null) ? 0 : this.email.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("User (");

        sb.append(externalId);
        sb.append(", ").append(name);
        sb.append(", ").append(phone);
        sb.append(", ").append(email);
        sb.append(", ").append(address);
        sb.append(", ").append(region);
        sb.append(", ").append(city);
        sb.append(", ").append(state);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(lastUpdate);

        sb.append(")");
        return sb.toString();
    }
}
